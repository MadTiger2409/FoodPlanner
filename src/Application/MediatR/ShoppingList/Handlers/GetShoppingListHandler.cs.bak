using FoodPlanner.Application.Common.Interfaces;
using FoodPlanner.Application.Common.ProjectionModels;
using FoodPlanner.Application.MediatR.ShoppingList.Queries;
using Microsoft.EntityFrameworkCore;
using MediatR;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;

namespace FoodPlanner.Application.MediatR.ShoppingList.Handlers
{
    public class GetShoppingListHandler : IRequestHandler<GetShoppingListQuery, List<ShoppingListModel>>
    {
        private readonly IApplicationDbContext _context;

        public GetShoppingListHandler(IApplicationDbContext context) => _context = context;

        public async Task<List<ShoppingListModel>> Handle(GetShoppingListQuery request, CancellationToken cancellationToken)
        {
            var shoppingList = await _context.Ingredients
                .Include(x => x.Product)
                .Include(x => x.Unit)
                .Include(x => x.Meal)
                .ThenInclude(y => y.PlannedMeals.Where(z => z.ScheduledFor.Date >= request.From.Date && z.ScheduledFor.Date <= request.To.Date))
                .GroupBy(b => new
                {
                    Product = b.Product.Name,
                    Unit = b.Unit.Name,
                    b.Id,
                    UnitId = b.Unit.Id,
                })
                .Select(sl => new ShoppingListModel
                {
                    Name = sl.Key.Product,
                    Unit = sl.Key.Unit,
                    Amount = sl.Sum(x => x.Amount)
                }).ToListAsync();

            //var shoppingList = await _context.ShoppingLists.FromSqlRaw("SELECT p.Name, u.Name AS 'Unit', SUM(i.amount) AS 'Amount' FROM Ingredients i INNER JOIN Meals m ON m.Id = i.MealId INNER JOIN Units u ON u.Id = i.UnitId INNER JOIN PlannedMeals pm ON pm.MealId = m.Id INNER JOIN Products p ON p.Id = i.ProductId WHERE(pm.ScheduledFor >= CAST('{0}' AS date) and pm.ScheduledFor <= CAST('{1}' AS date)) GROUP BY p.Name, u.Name, i.productid, i.unitid, i.mealid;",request.From.Date, request.To.Date).ToListAsync();

            return shoppingList;
        }
    }
}
